var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define("line", ["require", "exports", "vega"], function (require, exports, vega) {
    "use strict";
    var _this = this;
    exports.__esModule = true;
    // : {values: {x: number, y: number, c: number}[], name: string}[]
    var genSchema = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        return ({
            "$schema": "https://vega.github.io/schema/vega/v4.json",
            "width": 3200,
            "height": 1800,
            "padding": 5,
            signals: [],
            // "signals": [
            //   {
            //     "name": "interpolate",
            //     "value": "linear",
            //     "bind": {
            //       "input": "select",
            //       "options": [
            //         "basis",
            //         "cardinal",
            //         "catmull-rom",
            //         "linear",
            //         "monotone",
            //         "natural",
            //         "step",
            //         "step-after",
            //         "step-before"
            //       ]
            //     }
            //   }
            // ],
            // interpolate: "monotone",
            data: data,
            "scales": [
                {
                    "name": "x",
                    "type": "point",
                    "range": "width",
                    "domain": { "data": "table", "field": "x" }
                },
                {
                    "name": "y",
                    "type": "linear",
                    "range": "height",
                    "nice": true,
                    "zero": true,
                    "domain": { "data": "table", "field": "y" }
                },
                {
                    "name": "color",
                    "type": "ordinal",
                    "range": { scheme: 'catagory20' },
                    "domain": { "data": "table", "field": "c" }
                }
            ],
            "axes": [
                { "orient": "bottom", "scale": "x" },
                { "orient": "left", "scale": "y" }
            ],
            "marks": [
                {
                    "type": "group",
                    "from": {
                        "facet": {
                            "name": "series",
                            "data": "table",
                            "groupby": "c"
                        }
                    },
                    "marks": [
                        {
                            "type": "line",
                            "from": { "data": "series" },
                            "encode": {
                                "enter": {
                                    "x": { "scale": "x", "field": "x" },
                                    "y": { "scale": "y", "field": "y" },
                                    "stroke": { "scale": "color", "field": "c" },
                                    "strokeWidth": { "value": 2 }
                                },
                                "update": {
                                    "interpolate": { "signal": "interpolate" },
                                    "fillOpacity": { "value": 1 }
                                },
                                "hover": {
                                    "fillOpacity": { "value": 0.5 }
                                }
                            }
                        }
                    ]
                }
            ]
        });
    };
    var toSvg = function (data) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (new vega.View(vega.parse(genSchema(data))).renderer('none').initialize()).toSVG()];
        });
    }); };
});
